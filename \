import { useState } from "react";
import "./App.css";

interface PromptEntry {
  name: string;
  prompt: string;
  id: string;
}

interface StoreState {
  promptList: PromptEntry[];
}

function generateUUID() {
  return crypto.randomUUID();
}

function App() {
  const params = new URLSearchParams(window.location.search);
  const selectedText = params.get("text");

  const SavePromopt = () => {
    const [name, setName] = useState("");

    const onSubmit = async () => {
      const id = generateUUID();
      const entry = { name, prompt: selectedText!, id };

      const { promptList } = (await chrome.storage.local.get({
        promptList: [],
      })) as StoreState;

      promptList.push(entry);
      await chrome.storage.local.set({ promptList });
    };

    return (
      <div>
        <input
          value={name}
          onChange={(e) => {
            setName(e.currentTarget.value);
          }}
          type="text"
          placeholder="Name your prompt"
        />
        <div>{selectedText}</div>
        <button onClick={onSubmit} disabled={!!name}>
          Submit
        </button>
      </div>
    );
  };

  const ListPrompts = () => {
    const [promptList, setPromptList] = useState<PromptEntry[]>([]);

    chrome.storage.local.get(
      {
        promptList: [],
      },
      (data) => {
        setPromptList(data.promptList || []);
      },
    );

    return (
      <div>
        {promptList.length ? (
          promptList.map((promptItem) => {
            return (
              <div>
                <span>{promptItem.name}</span>
              </div>
            );
          })
        ) : (
          <div>No prompts saved</div>
        )}
      </div>
    );
  };

  return (
    <>
      <div className="card">
        {selectedText ? <SavePromopt /> : <ListPrompts />}
      </div>
    </>
  );
}

export default App;
